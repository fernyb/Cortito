#!/usr/bin/env ruby
require "rubygems"
require "plist"
require "erubis"
require "uri"
require "nokogiri"


puts `xcodebuild -target Cortito -configuration Release`

release_build = "build/Release/Cortito.bundle"

result = Plist::parse_xml("#{release_build}/Contents/Info.plist")

#
# http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjCTutorial/08Configuring/08Configuring.html
#
# CFBundleVersion should be the build number, revision build. (ex. 100)
# CFBundleShortVersionString is the Release number, Human Readable (ex. 1.5.0)
#
CFBundleVersion = result['CFBundleVersion']
CFBundleShortVersionString = result['CFBundleShortVersionString']
CFBundleName = result['CFBundleName']

AppCastURL = result['SUFeedURL']

uri = URI.parse(AppCastURL)

AppHost = "#{uri.scheme}://#{uri.host}"
AppHost << ":#{uri.port}" unless uri.port == 80

# http://github.com/downloads/fernyb/Cortito/Cortito-1.0.zip
AppDownloadHost = "http://github.com/downloads/fernyb/Cortito"


release_zip = "#{CFBundleName}-#{CFBundleShortVersionString}.zip"
puts `cd build/Release; ditto -c -k --keepParent -rsrc #{CFBundleName}.bundle #{release_zip}`

if File.exists?("build/Release/#{release_zip}")
  puts `mv build/Release/#{release_zip} build/#{release_zip}`
else
  exit
end

#
# Sign the update
#
user = `whoami`.strip
path_to_private_key = "/Users/#{user}/keys/dsa_priv.pem"
unless File.exists?(path_to_private_key)
  puts "A private key is required. (#{path_to_private_key})"
  puts "Please read: http://sparkle.andymatuschak.org/documentation/pmwiki.php/Documentation/PublishingAnUpdate"
  exit
end

signcommand = "scripts/sign_update build/#{release_zip} #{path_to_private_key}"
signature_key = `#{signcommand}`
signature_key = signature_key.split.join('')

#
# Generate an the AppCast
#
file_size = File.size("build/#{release_zip}")
release_html_page = "#{CFBundleName}-#{CFBundleShortVersionString}.html"
release_html_page.downcase!
release_html_page_path = "#{AppHost}/app/#{release_html_page}"
content_type = "application/x-zip-compressed"

newItem = %Q{
<item>
  <title>Version #{CFBundleShortVersionString}</title>
  <sparkle:minimumSystemVersion>10.6</sparkle:minimumSystemVersion>
  <sparkle:releaseNotesLink>#{release_html_page_path}</sparkle:releaseNotesLink>
  <pubDate>#{Time.now}</pubDate>
  <enclosure url="#{AppDownloadHost}/#{release_zip}" sparkle:version="#{CFBundleVersion}" sparkle:shortVersionString="#{CFBundleShortVersionString}" sparkle:dsaSignature="#{signature_key}" length="#{file_size}" type="#{content_type}" />
</item>

}

#
# Remove duplicates
#
items = File.open("appcast/item.xml", "r"){|f| f.read }
doc = Nokogiri::XML.parse("<channel>#{items}</channel>")
filteredItems = doc.css("item").select {|item| item.css("enclosure").attr("shortVersionString").to_s != CFBundleShortVersionString.to_s }

# Rebuild Items because it strips out the sparkle attributes
# If that happens Sparkles throws a cannot parse error

filteredItems = filteredItems.collect do |fitem|
  fitem_enclosure = fitem.css("enclosure")
%Q{
<item>
  <title>#{fitem.css("title").inner_text}</title>
  <sparkle:minimumSystemVersion>#{fitem.css("minimumSystemVersion").inner_text}</sparkle:minimumSystemVersion>
  <sparkle:releaseNotesLink>#{fitem.css("releaseNotesLink").inner_text}</sparkle:releaseNotesLink>
  <pubDate>#{fitem.css("pubDate").inner_text}</pubDate>
  <enclosure url="#{fitem_enclosure.attr('url')}" sparkle:version="#{fitem_enclosure.attr('version')}" sparkle:shortVersionString="#{fitem_enclosure.attr('shortVersionString')}" sparkle:dsaSignature="#{fitem_enclosure.attr('dsaSignature')}" length="#{fitem_enclosure.attr('length')}" type="#{fitem_enclosure.attr('type')}" />
</item>
}
end

filteredItems << newItem

newItem = filteredItems.join("")


#
# Append a new item
#
File.open("appcast/item.xml", "w"){|f| f.write(newItem) }
items = File.open("appcast/item.xml", "r"){|f| f.read }

template = File.open("appcast/template.erb.xml") {|f| f.read }
template = Erubis::Eruby.new(template)
xml = template.result({
  :name         => CFBundleName,
  :link         => AppCastURL,
  :render_items => items
})

appcast_name = "#{CFBundleName.downcase}_appcast.xml"
appcast_path = "appcast/#{appcast_name}"
File.open(appcast_path, "a") {|f| f.write(xml) }

#
# Ready for Upload
#
`mkdir ready_for_upload` unless File.exists?("ready_for_upload")
`mv #{appcast_path} ready_for_upload/#{appcast_name}`
`mv build/#{release_zip} ready_for_upload/#{release_zip}`

File.open("ready_for_upload/#{release_html_page}", "a") do |f| 
  f.write("\n<br />\nRelease Notes Go Here...")
end

puts "Ready for upload...."
puts "Don't forget to write the release notes!"
`mate ready_for_upload/#{release_html_page.downcase}`
